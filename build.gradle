plugins {
	id 'fabric-loom' version '1.1.10'
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
	id 'de.undercouch.download' version '5.4.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	implementation 'jakarta.xml.ws:jakarta.xml.ws-api:4.0.0'
	implementation 'com.sun.xml.ws:jaxws-rt:4.0.1'
	implementation 'com.sun.xml.ws:rt:4.0.1'


	implementation files('lib/vboxjws.jar')
	shadow files('lib/vboxjws.jar')
}

loom {
	accessWidenerPath = file("src/main/resources/mcvmcomputers.accesswidener")
}

task getVirtualBoxSDK(type: Download) {
	src "https://download.virtualbox.org/virtualbox/${project.vboxsdk_version}/VirtualBoxSDK-${project.vboxsdk_version}-${project.vboxsdk_revision}.zip"
	dest file('tmp/VirtualBoxSDK.zip')

	doLast {
		copy {from zipTree(file('tmp/VirtualBoxSDK.zip')) into file('tmp')}
		copy {from file('tmp/sdk/bindings/webservice/java/jax-ws/vboxjws.jar') into file('lib')}
		delete file('tmp')
	}
}
tasks.ideaSyncTask.dependsOn(getVirtualBoxSDK)

shadowJar {
	 configurations = [project.configurations.shadow]
	 archivesBaseName "${project.archives_base_name}"
	 archiveClassifier.set('dev')
	 archiveVersion.set("${project.mod_version}")
}

tasks.remapJar.dependsOn shadowJar

processResources {
	inputs.property "version", project.version
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier.set("sources")
	from sourceSets.main.allSource
}

java.withSourcesJar()

jar {
	from "LICENSE"
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
